{"version":3,"sources":["../../src/controllers/userController.js"],"names":["User","mongoose","model","UserSchema","register","req","res","newUser","body","hashPassword","bcrypt","hashSync","password","save","err","user","status","send","message","undefined","json","login","findOne","email","comparePassword","token","jwt","sign","username","_id","id","loginRequired","next"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,OAAOC,mBAASC,KAAT,CAAe,MAAf,EAAuBC,qBAAvB,CAAb;;AAEO,IAAMC,8BAAW,SAAXA,QAAW,CAACC,GAAD,EAAMC,GAAN,EAAc;AACpC,MAAMC,UAAU,IAAIP,IAAJ,CAASK,IAAIG,IAAb,CAAhB;AACAD,UAAQE,YAAR,GAAuBC,iBAAOC,QAAP,CAAgBN,IAAIG,IAAJ,CAASI,QAAzB,EAAmC,EAAnC,CAAvB;AACAL,UAAQM,IAAR,CAAa,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC1B,QAAID,GAAJ,EAAS;AACP,aAAOR,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,iBAASJ;AADiB,OAArB,CAAP;AAGD,KAJD,MAIO;AACLC,WAAKN,YAAL,GAAoBU,SAApB;AACA,aAAOb,IAAIc,IAAJ,CAASL,IAAT,CAAP;AACD;AACF,GATD;AAWD,CAdM;;AAgBA,IAAMM,wBAAQ,SAARA,KAAQ,CAAChB,GAAD,EAAMC,GAAN,EAAc;AACjCN,OAAKsB,OAAL,CAAa;AACXC,WAAOlB,IAAIG,IAAJ,CAASe;AADL,GAAb,EAEG,UAACT,GAAD,EAAMC,IAAN,EAAe;AAChB,QAAID,GAAJ,EAAS,MAAMA,GAAN;AACT,QAAI,CAACC,IAAL,EAAW;AACTT,UAAIU,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB,EAAEF,SAAS,uCAAX,EAArB;AACD,KAFD,MAEO,IAAIH,IAAJ,EAAU;AACf,UAAI,CAACA,KAAKS,eAAL,CAAqBnB,IAAIG,IAAJ,CAASI,QAA9B,EAAwCG,KAAKN,YAA7C,CAAL,EAAiE;AAC/DH,YAAIU,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB,EAAEF,SAAS,wCAAX,EAArB;AACD,OAFD,MAEO;AACL,eAAOZ,IAAIc,IAAJ,CAAS,EAAEK,OAAOC,uBAAIC,IAAJ,CAAS,EAAEJ,OAAOR,KAAKQ,KAAd,EAAqBK,UAAUb,KAAKa,QAApC,EAA8CC,KAAKd,KAAKe,EAAxD,EAAT,EAAuE,aAAvE,CAAT,EAAT,CAAP;AACD;AACF;AACF,GAbD;AAcD,CAfM;;AAiBA,IAAMC,wCAAgB,SAAhBA,aAAgB,CAAC1B,GAAD,EAAMC,GAAN,EAAW0B,IAAX,EAAoB;AAC/C,MAAI3B,IAAIU,IAAR,EAAc;AACZiB;AACD,GAFD,MAEO;AACL,WAAO1B,IAAIU,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB,EAAEF,SAAS,oBAAX,EAArB,CAAP;AACD;AACF,CANM","file":"userController.js","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport { UserSchema } from '../models/userModel';\n\nconst User = mongoose.model('User', UserSchema);\n\nexport const register = (req, res) => {\n  const newUser = new User(req.body);\n  newUser.hashPassword = bcrypt.hashSync(req.body.password, 10);\n  newUser.save((err, user) => {\n    if (err) {\n      return res.status(400).send({\n        message: err\n      });\n    } else {\n      user.hashPassword = undefined;\n      return res.json(user);\n    }\n  })\n\n};\n\nexport const login = (req, res) => {\n  User.findOne({\n    email: req.body.email\n  }, (err, user) => {\n    if (err) throw err;\n    if (!user) {\n      res.status(401).json({ message: 'Authentication failed. No user found!' });\n    } else if (user) {\n      if (!user.comparePassword(req.body.password, user.hashPassword)) {\n        res.status(401).json({ message: 'Authentication failed. Wrong password!' });\n      } else {\n        return res.json({ token: jwt.sign({ email: user.email, username: user.username, _id: user.id }, 'RESTFULAPIs') });\n      }\n    }\n  });\n};\n\nexport const loginRequired = (req, res, next) => {\n  if (req.user) {\n    next();\n  } else {\n    return res.status(401).json({ message: 'Unauthorized user!' });\n  }\n};"]}